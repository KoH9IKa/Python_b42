{"name": "test_check_data_from_contacts_page_with_data_in_db", "status": "failed", "statusDetails": {"message": "AssertionError: assert '+77265\\n+701159504\\n+759850' == '+77265\\n+7001159504\\n+759850'\n  \n    +77265\n  - +7001159504\n  ?   -\n  + +701159504\n    +759850", "trace": "app = <fixture.application.Application object at 0x048E9700>\ndb = <fixture.db.DbFixture object at 0x054E8958>\n\n    def test_check_data_from_contacts_page_with_data_in_db(app, db):\n        app.contact.open_contacts_page()\n        contacts_db = sorted(db.get_db_contacts_list(), key=Contact.id_or_max)  # достаём и сортируем данные из таблицы\n        contacts_homepage = sorted(app.contact.get_all_contacts_list(), key=Contact.id_or_max)  # тоже самое для данных с ui\n        assert contacts_db == contacts_homepage  # сравниваем то что прописано в __eq__\n        db_phones, db_emails = [], []  # создаём пустые списки для телефонов и почт из базы\n        for db_contact in db.get_db_contacts_list(): # для всех контактов в базе перебираем\n            db_phones.append(app.contact.merge_phones_like_on_home_page(db_contact))  # тут собираем через моржа телефоны\n            db_emails.append(app.contact.merge_emails_like_on_home_page(db_contact))  # а тут собираем почты\n        for index in range(0, (len(contacts_homepage))):  # теперь у нас есть 3 одинаковых списка с одинаковым range (наверное)\n            assert contacts_homepage[index].all_emails_from_home_page == db_emails[index]  # в каждом контакте проверяем его олл имейлз с такой же строкой из базы\n>           assert contacts_homepage[index].all_phones_from_home_page == db_phones[index]  # тоже самое для телефонов\nE           AssertionError: assert '+77265\\n+701159504\\n+759850' == '+77265\\n+7001159504\\n+759850'\nE             \nE               +77265\nE             - +7001159504\nE             ?   -\nE             + +701159504\nE               +759850\n\ntest\\contact\\test_contact_data.py:48: AssertionError"}, "start": 1710686939359, "stop": 1710686939711, "uuid": "4d8a124f-9f90-4868-8e2f-714e9aa4a3a4", "historyId": "11d0655f0c5a572416b1d04178cb5c0b", "testCaseId": "11d0655f0c5a572416b1d04178cb5c0b", "fullName": "test.contact.test_contact_data#test_check_data_from_contacts_page_with_data_in_db", "labels": [{"name": "parentSuite", "value": "test.contact"}, {"name": "suite", "value": "test_contact_data"}, {"name": "host", "value": "DESKTOP-A5IKD87"}, {"name": "thread", "value": "16708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.contact.test_contact_data"}]}